(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{438:function(s,a,t){"use strict";t.r(a);var n=t(2),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("Boxx"),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#第10条、覆盖equals时请遵守通用约定"}},[s._v("第10条、覆盖equals时请遵守通用约定")])]),a("li",[a("a",{attrs:{href:"#第11条、覆盖equals时总要覆盖hashcode"}},[s._v("第11条、覆盖equals时总要覆盖hashCode")])]),a("li",[a("a",{attrs:{href:"#第12条、始终要覆盖tostring"}},[s._v("第12条、始终要覆盖toString")])]),a("li",[a("a",{attrs:{href:"#第13条、谨慎地覆盖clone"}},[s._v("第13条、谨慎地覆盖clone")])]),a("li",[a("a",{attrs:{href:"#第14条、考虑实现comparable接口"}},[s._v("第14条、考虑实现Comparable接口")])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"第10条、覆盖equals时请遵守通用约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第10条、覆盖equals时请遵守通用约定"}},[s._v("#")]),s._v(" 第10条、覆盖equals时请遵守通用约定")]),s._v(" "),a("p",[s._v("覆盖 equals 方法看起来似乎很简单，但是有许多覆盖方式会导致错误，并且后果非常严重")]),s._v(" "),a("p",[s._v("最容易避免这类问题的办法就是不覆盖 equals 方法，在这种情况下，类的每个实例都只与自身相等")]),s._v(" "),a("p",[s._v("如果满足了以下任何一个条件，则无需覆盖equals方法：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("类的每个实例都是唯一的")]),s._v(" "),a("p",[s._v("因为Object提供的equals方法就是比较二者是否为同一个对象，既然每个实例都是唯一的，那么如果不是同一个对象也必然是不相等的")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("类没有必要提供equals方法，从Object继承得到的equals足够使用")])]),s._v(" "),a("li",[a("p",[s._v("父类已经覆盖了equals，子类也能使用父类的equals")]),s._v(" "),a("p",[s._v("如ArrayList直接使用了AbstractList中覆盖的equals方法")])]),s._v(" "),a("li",[a("p",[s._v("类是私有的，或者是包级私有的，即 equals 方法永远不会被调用")]),s._v(" "),a("p",[s._v("但反射是可以实例化私有类的，因此想要彻底保护，可以重写equals方法并在方法中抛出异常")])])]),s._v(" "),a("p",[s._v("而当对象需要比较字段值，而父类又没有覆盖equals时，就需要覆盖equals。如String、Integer等")]),s._v(" "),a("p",[s._v("在覆盖 equals 方法的时候，必须要遵守它的通用约定：")]),s._v(" "),a("ul",[a("li",[s._v("自反性(reflexive)：对于任何非 null 的引用值 x，"),a("code",[s._v("x.equals(x)")]),s._v(" 必须返回true")]),s._v(" "),a("li",[s._v("对称性(symmetric)：对于任何非 null 的引用值 x 和 y，当且仅当 "),a("code",[s._v("y.equals(x)")]),s._v(" 返回 true 时，"),a("code",[s._v("x.equals(y)")]),s._v(" 也必须返回 true")]),s._v(" "),a("li",[s._v("传递性(transitive)：对于任何非 null 的引用值 x、y和z，如果"),a("code",[s._v("x.equals(y)")]),s._v(" 返回 true ，并且 "),a("code",[s._v("y.equals(z)")]),s._v(" 也返回 true ，那么 "),a("code",[s._v("x.equals(z)")]),s._v(" 也必须返回 true")]),s._v(" "),a("li",[s._v("一致性(consistent)：对于任何非 null 引用值 x 和 y，只要 equals 的比较操作在对象中所用的信息没有被修改，多次调用 "),a("code",[s._v("x.equals(y)")]),s._v(" 就会一致地返回true, 或者一致地返回 false")]),s._v(" "),a("li",[s._v("对于任何非 null 的引用值 x , "),a("code",[s._v("x.equals (null)")]),s._v(" 必须返回 false")])]),s._v(" "),a("p",[s._v("基于这些约定，有一些优秀的实践，在很多源码中都能找到这些实践：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("使用 == 操作符检查“参数是否为这个对象的引用”。如果是，则返回 true")]),s._v(" "),a("p",[s._v("因为同一个对象的两个引用，肯定是相等的。如果比较操作代价较大，可以作为一种性能优化")])]),s._v(" "),a("li",[a("p",[s._v("使用 instanceof 操作符检查“参数是否为正确的类型” 如果不是，则返回 false")])]),s._v(" "),a("li",[a("p",[s._v("把参数转换成正确的类型")])]),s._v(" "),a("li",[a("p",[s._v("对于该类中的每个“关键”（ significant ）域，检查参数中的域是否与该对象中对应的域相匹配")]),s._v(" "),a("p",[s._v("对于基本数据类型的关键域，使用 == 比较，对于引用数据类型，使用其 equals 比较")])])]),s._v(" "),a("p",[a("font",{attrs:{color:"#16b777"}},[s._v("使用IDEA，可以Ctrl+O，选择要比较的字段，快速实现equals方法，比较便利")])],1),s._v(" "),a("h2",{attrs:{id:"第11条、覆盖equals时总要覆盖hashcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第11条、覆盖equals时总要覆盖hashcode"}},[s._v("#")]),s._v(" 第11条、覆盖equals时总要覆盖hashCode")]),s._v(" "),a("p",[s._v("在每个覆盖了 equals 方法的类中，都必须覆盖 hashCode 方法。如果不这样做的话，就会违反 hashCode 的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，如HashMap、HashSet等")]),s._v(" "),a("p",[s._v("下面是 hashCode 约定的内容，摘自 Object 规范：")]),s._v(" "),a("ul",[a("li",[s._v("在应用程序的执行期间，只要对象的 equals 方法的比较操作所用到的信息没有被修改，那么对同一个对象的多次调用， hashCode 方法都必须始终返回"),a("strong",[s._v("同一个值")]),s._v("。在一个应用程序与另一个程序的执行过程中，执行 hashCode 方法所返回的值可以不一致")]),s._v(" "),a("li",[s._v("如果两个对象根据 equals(Object) 方法比较结果是相等的，那么调用这两个对象中的 hashCode 方法都必须产生同样的整数结果")]),s._v(" "),a("li",[s._v("如果两个对象根据 equals(Object) 方法比较是不相等的，那么调用这两个对象中的 hashCode 方法，则不一定要求 hashCode 方法必须产生不同的结果。但是，给不相等的对象产生截然不同的整数结果，有可能提高散列表（ hash table ）的性能")])]),s._v(" "),a("p",[s._v("而覆盖equals没有覆盖hashCode，违背了第二条规范，在使用如HashMap时，可能就会出问题：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义一个类，重写equals不重写hashcode")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Person{"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name=\'"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建两个字段值相同的对象，其实map中存放了2个，没有覆盖")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"J"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"J"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// {Person{name='J'}=2, Person{name='J'}=1}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("至于如果重写hashCode方法，现在的工具非常多，不需要我们自己再去花心思实现。")]),s._v(" "),a("p",[a("font",{attrs:{color:"#16b777"}},[s._v("使用IDEA，可以Ctrl+O，选择要比较的字段，快速实现equals方法。此外lombok的@Data注解也会自动生成hashCode方法")])],1),s._v(" "),a("h2",{attrs:{id:"第12条、始终要覆盖tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第12条、始终要覆盖tostring"}},[s._v("#")]),s._v(" 第12条、始终要覆盖toString")]),s._v(" "),a("p",[s._v("还是用上面Person的例子，对比一下覆盖与不覆盖toString的区别：")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("不覆盖：\n{Person@7f31245a=2, Person@14ae5a5=1}\n覆盖\n{Person{name='J'}=2, Person{name='J'}=1}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("可以发现，如果不覆盖toString，哪怕日志中将该对象打印出来，也看不出任何信息跟没打印没有区别！")]),s._v(" "),a("p",[s._v("覆盖toString后就可以获取到信息，从而帮助我们快速定位问题。但也要注意量，最好只输出有必要的字段。")]),s._v(" "),a("p",[s._v("IDEA中，同样的Ctrl+O可以快速实现toString；Lombok的@Data注解也会自动生成toString方法")]),s._v(" "),a("h2",{attrs:{id:"第13条、谨慎地覆盖clone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第13条、谨慎地覆盖clone"}},[s._v("#")]),s._v(" 第13条、谨慎地覆盖clone")]),s._v(" "),a("p",[s._v("覆盖clone方法，还需要实现cloneable接口，否则在调用clone时会抛异常")]),s._v(" "),a("p",[s._v("clone 方法的通用约定是非常弱的，下面是来自 Object 规范中的约定内容：")]),s._v(" "),a("p",[s._v("创建和返回该对象的一个拷贝，这个“拷贝”的精确含义取决于该对象的类。一般的含义是，对于任何对象 ，表达式 "),a("code",[s._v("x.clone() != x")]),s._v("  将会返回结果 true ，并且表达式 "),a("code",[s._v("x.clone().getClass() == x.getClass()")]),s._v("  将会返回结果 true")]),s._v(" "),a("p",[s._v("但这些都不是绝对的要求。虽然通常情况下，表达式 "),a("code",[s._v("x.clone() .equals(x)")]),s._v("  将会返回结果 true ，但是，这也不是个绝对的要求按照约定")]),s._v(" "),a("p",[s._v("这个方法返回的对象应该通过调用 super.clone 获得 如果类及其 超类（Object 除外）遵守这 约定，那么： x.clone() .getClass() == x.getClass() .")]),s._v(" "),a("p",[a("font",{attrs:{color:"#16b777"}},[s._v("书中提到，clone方法的约定非常弱。通常我们定义的业务类很少会覆盖clone方法，如果要提供拷贝，更多是选择拷贝构造器或拷贝工厂")])],1),s._v(" "),a("h2",{attrs:{id:"第14条、考虑实现comparable接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第14条、考虑实现comparable接口"}},[s._v("#")]),s._v(" 第14条、考虑实现Comparable接口")]),s._v(" "),a("p",[s._v("类实现了 Comparable 接口，就表明它的实例具有 内在的排序关系 (natural ordering)，一旦类实现了 Comparable 接口，它就可 以跟许多泛型算法（ generic algorithm ）以及 依赖于该接口的集合实现（ collection implementation ）进行协作。")]),s._v(" "),a("p",[s._v("如果我们定义的类有明确的大小关系，那么可以考虑实现Comparable接口")]),s._v(" "),a("p",[s._v("compareTo 方法的通用约定与 equals 方法的约定相似：")]),s._v(" "),a("p",[s._v("将这个对象与指定的对象进行比较，当该对象小于、等于或大于指定对象的时候， 分别返回一个负整数、零或者正整数。如果由于指定对象的类型而无法与该对象进行比较，则抛出 ClassCastException 异常。")]),s._v(" "),a("ul",[a("li",[s._v("实现者必须确保所有的 都满足 sgn(x.compareTo(y)) == -sgn(y.compareTo(x)) （这也暗示着，当且仅当y.compareTo (x) 抛出异常时，x.compareTo(y) 才必须抛出异常")]),s._v(" "),a("li",[s._v("实现者还必须确保这个比较关系是可传递的 x.compareTo(y) > 0 && y. compareTo(z) > 0 暗示着 x.compareTo(z) > 0")]),s._v(" "),a("li",[s._v("最后，实现者必须确保 x.compareTo(y) == 0，暗示着所有的 z 都满足 sgn(x.compareTo(z)) == sgn(y.compareTo(z))")]),s._v(" "),a("li",[s._v("强烈建议 (x.compareTo (y) == 0) == (x.equals(y))，但这并非绝对必要。一般说来，任何实现了 Comparable 接口的类，若违反了这个条件，都应该明确予以说明。推荐使用这样的说法：“注意：该类具有内在的排序功能，但是与 equals 不一致”\n"),a("ul",[a("li",[s._v("即如果x、y相等，那么compareTo方法最好返回0")])])])]),s._v(" "),a("p",[s._v("总而言之，每当实现一个对排序敏感的类时，都应该让这个类实现 Comparable 接口，以便其实例可以轻松地被分类、搜索，以及用在基于比较的集合中。每当在 compareTo 方法的实现中比较域值时，都要避免使用 < 和 > 操作符，而应该在装箱基本类型的类中使用静态的 compare 方法，或者在 Comparator 接口中使用比较器构造方法")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 装箱基本类型的compareTo方法，其实也是使用静态的 compare 方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" anotherInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" anotherInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])],1)}),[],!1,null,null,null);a.default=e.exports}}]);