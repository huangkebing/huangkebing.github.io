(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{330:function(t,e,a){t.exports=a.p+"assets/img/DefaultListableBeanFactory.1b313cea.png"},385:function(t,e,a){"use strict";a.r(e);var n=a(4),r=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"第一章、beanfactory概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一章、beanfactory概述"}},[t._v("#")]),t._v(" 第一章、BeanFactory概述")]),t._v(" "),e("p",[t._v("BeanFactory，找了一些资料后，看到有人说是Spring的心脏、IoC容器的真面目")]),t._v(" "),e("p",[t._v("同样的，需要先找到完整的继承关系，通过调试，最终找到了一个BeanFactory的实现类：")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("AbstractRefreshableApplicationContext.java")]),t._v("中")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultListableBeanFactory")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createBeanFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultListableBeanFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInternalParentBeanFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h2",{attrs:{id:"一、继承关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、继承关系"}},[t._v("#")]),t._v(" 一、继承关系")]),t._v(" "),e("p",[e("img",{attrs:{src:a(330),alt:"DefaultListableBeanFactory"}})]),t._v(" "),e("p",[t._v("正如这个类图所示，涉及的类非常多，而且这只涉及到一些顶层接口和抽象类，很多实现类都没有列出来。")]),t._v(" "),e("h2",{attrs:{id:"二、基础服务aliasregistry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、基础服务aliasregistry"}},[t._v("#")]),t._v(" 二、基础服务AliasRegistry")]),t._v(" "),e("p",[t._v("继承关系中可以看到，有一个基础服务"),e("code",[t._v("AliasRegistry")]),t._v("，意为别名注册。有一个实现类"),e("code",[t._v("SimpleAliasRegistry")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"三、singletonbeanregistry系列类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、singletonbeanregistry系列类"}},[t._v("#")]),t._v(" 三、SingletonBeanRegistry系列类")]),t._v(" "),e("h3",{attrs:{id:"_3-1-singletonbeanregistry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-singletonbeanregistry"}},[t._v("#")]),t._v(" 3.1 singletonBeanRegistry")]),t._v(" "),e("p",[t._v("定义共享 Bean 实例的注册接口。可以通过{@link org.springframework.beans.factory.BeanFactory}实现，以便以统一的方式公开其单例管理工具。意思是该接口提供了单例bean的注册能力，但需要由BeanFactory来实现，以便统一去管理bean")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("void registerSingleton(String beanName, Object singletonObject);")])]),t._v(" "),e("td",[t._v("将对象注册为单例，不会执行初始化和销毁的回调，通常是容器在基于 BeanDefinition 创建 singleton 时调用该方法")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("@Nullable Object getSingleton(String beanName);")])]),t._v(" "),e("td",[t._v("获取bean，但有很多限制：只有已经实例化的，且无法识别FactoryBean前缀和别名")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean containsSingleton(String beanName);")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("String[] getSingletonNames();")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("int getSingletonCount();")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Object getSingletonMutex();")])]),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("这里的方法不太理解，只知道是管理单例实例，需要结合具体实现来理解")]),t._v(" "),e("h2",{attrs:{id:"四、beandefinitionregistry系列类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、beandefinitionregistry系列类"}},[t._v("#")]),t._v(" 四、BeanDefinitionRegistry系列类")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean containsBeanDefinition(String beanName);")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("String[] getBeanDefinitionNames();")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("int getBeanDefinitionCount();")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean isBeanNameInUse(String beanName);")])]),t._v(" "),e("td")])])]),t._v(" "),e("h2",{attrs:{id:"五、beanfactory系列类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、beanfactory系列类"}},[t._v("#")]),t._v(" 五、BeanFactory系列类")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FACTORY_BEAN_PREFIX")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("变量定义了一个前缀，用于区分factoryBean和BeanFactory实例化的bean")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("Object getBean(String name) throws BeansException;")])]),t._v(" "),e("td",[t._v("跟据name返回bean，可以是singleton也可以是prototype。支持别名，如果匹配不到bean会尝试匹配父工厂")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<T> T getBean(String name, Class<T> requiredType) throws BeansException;")])]),t._v(" "),e("td",[t._v("和getBean(String)一样，但是需要给定类型(requiredType)，相应的返回的类型和给定类型一致")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Object getBean(String name, Object... args) throws BeansException;")])]),t._v(" "),e("td",[t._v("为使用显式参数创建 Bean 实例时要使用的参数，测试出如果是prototype作用域，args会注入到bean中，而singleton不会")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<T> T getBean(Class<T> requiredType) throws BeansException;")])]),t._v(" "),e("td",[t._v("返回与给定对象类型唯一匹配的 Bean 实例（如果有）")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<T> T getBean(Class<T> requiredType, Object... args) throws BeansException;")])]),t._v(" "),e("td",[t._v("对象类型查找bean，且提供参数，和第三个方法类似")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType);")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType);")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean containsBean(String name);")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean isSingleton(String name) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean isPrototype(String name) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("@Nullable Class<?> getType(String name) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("@Nullable Class<?> getType(String name, boolean allowFactoryBeanInit) throws NoSuchBeanDefinitionException;")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("String[] getAliases(String name);")])]),t._v(" "),e("td")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);