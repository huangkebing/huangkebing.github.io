(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{409:function(a,t,s){a.exports=s.p+"assets/img/ArrayList.dd169234.png"},420:function(a,t,s){"use strict";s.r(t);var e=s(2),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("Boxx"),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#一、继承树"}},[a._v("一、继承树")])]),t("li",[t("a",{attrs:{href:"#二、标记接口"}},[a._v("二、标记接口")]),t("ul",[t("li",[t("a",{attrs:{href:"#_2-1-radomaccess"}},[a._v("2.1 RadomAccess")])]),t("li",[t("a",{attrs:{href:"#_2-2-cloneable"}},[a._v("2.2 Cloneable")])]),t("li",[t("a",{attrs:{href:"#问题1-不实现cloneable接口会怎么样"}},[a._v("问题1 不实现Cloneable接口会怎么样")])]),t("li",[t("a",{attrs:{href:"#_2-3-serializable"}},[a._v("2.3 Serializable")])])])]),t("li",[t("a",{attrs:{href:"#三、list"}},[a._v("三、List")])]),t("li",[t("a",{attrs:{href:"#四、构造器"}},[a._v("四、构造器")])]),t("li",[t("a",{attrs:{href:"#五、字段含义与作用"}},[a._v("五、字段含义与作用")])]),t("li",[t("a",{attrs:{href:"#六、内部类"}},[a._v("六、内部类")])]),t("li",[t("a",{attrs:{href:"#七、方法解读"}},[a._v("七、方法解读")])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"一、继承树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、继承树"}},[a._v("#")]),a._v(" 一、继承树")]),a._v(" "),t("p",[t("img",{attrs:{src:s(409),alt:"ArrayList"}})]),a._v(" "),t("p",[a._v("ArrayList直接实现了4个接口")]),a._v(" "),t("ul",[t("li",[a._v("List")]),a._v(" "),t("li",[a._v("Cloneable")]),a._v(" "),t("li",[a._v("RadomAccess")]),a._v(" "),t("li",[a._v("Serializable")])]),a._v(" "),t("p",[a._v("继承了AbstractList抽象类")]),a._v(" "),t("p",[a._v("再往上继承了Collection等一系列类可以见：")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.huangkebing.com/blogs/JDK8/util/Collection.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Collection | technology-inn"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"二、标记接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、标记接口"}},[a._v("#")]),a._v(" 二、标记接口")]),a._v(" "),t("p",[a._v("标记接口是一个空接口，没有任何方法或字段。它只是作为一个标记，表示它的实现类具有一定的属性或特点。实现了该接口的类将被赋予特定的语义意义。")]),a._v(" "),t("p",[t("code",[a._v("ArrayList")]),a._v("共实现了3个标记接口")]),a._v(" "),t("h3",{attrs:{id:"_2-1-radomaccess"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-radomaccess"}},[a._v("#")]),a._v(" 2.1 RadomAccess")]),a._v(" "),t("p",[a._v("RandomAccess标记接口表示实现此接口的类可以使用随机访问优化算法来访问集合中的元素，即可以通过索引直接访问集合中的元素，而不需要按顺序遍历整个集合，这对于大型集合而言能够提高访问效率。")]),a._v(" "),t("p",[a._v("例如，实现RandomAccess接口的List实例可以使用get()方法进行随机访问，而不像非RandomAccess的List实例需要使用迭代器或for循环逐个遍历获取元素。")]),a._v(" "),t("h3",{attrs:{id:"_2-2-cloneable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-cloneable"}},[a._v("#")]),a._v(" 2.2 Cloneable")]),a._v(" "),t("p",[a._v("Cloneable标记接口表示类的实例是可克隆的，以向Object.clone()方法表示该方法创建该类实例副本是合法的")]),a._v(" "),t("h3",{attrs:{id:"问题1-不实现cloneable接口会怎么样"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题1-不实现cloneable接口会怎么样"}},[a._v("#")]),a._v(" 问题1 不实现Cloneable接口会怎么样")]),a._v(" "),t("blockquote",[t("p",[a._v("Q：上述提到，Cloneable是表示clone方法是合法的，那么不实现Cloneable直接调clone会发生什么？")])]),a._v(" "),t("p",[a._v("如果调用了一个未实现Cloneable类的实例的clone方法，会抛出CloneNotSupportedException异常")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CloneObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("clone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CloneNotSupportedException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("clone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("尝试调用clone：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cloneTest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CloneNotSupportedException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CloneObject")]),a._v(" object "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CloneObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// java.lang.CloneNotSupportedException: com.hkb.CloneObject")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" clone "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("clone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("而实现Cloneable接口后，再次调用，正常执行")]),a._v(" "),t("p",[a._v("此处还有一个点，Object的clone方法是protected级别，因此需要"),t("u",[a._v("重写")]),a._v("后才能调用到")]),a._v(" "),t("h3",{attrs:{id:"_2-3-serializable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-serializable"}},[a._v("#")]),a._v(" 2.3 Serializable")]),a._v(" "),t("p",[a._v("Serializable标记接口表示了一个类可以被序列化，即可以将其对象的状态转换为字节流以便于存储或传输。如果一个类需要被序列化，就必须将其实现Serializable接口。实现Serializable接口的类可以被序列化，但是需要注意的是，该类的所有非transient成员变量都需要是可序列化的，否则会发生异常。")]),a._v(" "),t("blockquote",[t("p",[a._v("备注：目前来说，Java的序列化已经不常用了，更多是使用Json等更简洁、易读的方式")])]),a._v(" "),t("h2",{attrs:{id:"三、list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、list"}},[a._v("#")]),a._v(" 三、List")]),a._v(" "),t("h2",{attrs:{id:"四、构造器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、构造器"}},[a._v("#")]),a._v(" 四、构造器")]),a._v(" "),t("h2",{attrs:{id:"五、字段含义与作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、字段含义与作用"}},[a._v("#")]),a._v(" 五、字段含义与作用")]),a._v(" "),t("h2",{attrs:{id:"六、内部类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、内部类"}},[a._v("#")]),a._v(" 六、内部类")]),a._v(" "),t("h2",{attrs:{id:"七、方法解读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、方法解读"}},[a._v("#")]),a._v(" 七、方法解读")])],1)}),[],!1,null,null,null);t.default=n.exports}}]);